<?xml version="1.0" encoding="UTF-8"?>
<RCJobs>
	<!--
    	 DefaultProperties can be override from command line
	 -->
    <DefaultProperties
            game="Game"
            l10n="localization"
            engine="Engine"
            src="."
            trg="..\_rc_${p}"
            pak_root=""
	/>
 <!--           branch="asset" -->

	<!-- General properties-->
	<DefaultProperties GameFolder="${game}" /> <!-- The subfolder that contains game assets -->
	<DefaultProperties LocalizationFolder="${l10n}" /> <!-- The subfolder that contains localization data -->
	<DefaultProperties EngineFolder="${engine}" /> <!-- The subfolder containing engine assets, probably should never be changed by 3rd party projects (it's hardcoded) -->
    <!-- <DefaultProperties Branch="${branch}" />-->
	<DefaultProperties P="PC" /> <!-- Special case: p must be set from the commandline, and it cannot be set to something else using RCJob, this default reflects the hardcoded default -->
	<Properties Platform="${P}" /> <!-- This is an alias of p that is used in this job file only -->

	<!-- Default path properties -->
	<DefaultProperties InputPath="${src}" /> <!-- By default, assume current directory contains source assets -->
	<DefaultProperties TempPath="${trg}" /> <!-- This script will store converted (but unpacked) files in a temp folder -->
	<DefaultProperties OutputPath="${pak_root}" /> <!-- The target folder for the output files (packed converted files) -->

	<!-- Default index format, you can override this from the command line -->
	<!-- This is used by meshes (.cgf) and geomcaches (.cax) -->
	<!-- Alternative: u16. Should match the engine typedef of vtx_idx type to prevent run-time conversion -->
	<DefaultProperties VertexIndexFormat="u32" />

	<!-- Shader source should be included only for internal builds -->
	<DefaultProperties IncludeShaderSource="0" />

	<!-- Deprecated option, can be used for benchmarking purposes -->
	<DefaultProperties CreateStartupCache="0" />

	<!-- This should allow hiding of initial load behind movies -->
	<DefaultProperties CreateIntroMovies="1" />

	<!-- If passed on the command-line, this will also package DLC (for EaaS redist) -->
	<!-- Be default, no need to waste time doing this -->
	<DefaultProperties PackageDlc="0" />

	<!-- Shared constant properties -->
	<Properties XmlFilterFile="${_rc_exe_folder}xmlfilter.txt" />
	<Properties XmlExtensions="*.animevents;*.adb;*.bspace;*.cdf;*.chrparams;*.comb;*.dlg;*.ent;*.fsq;*.fxl;*.ik;*.json;*.lmg;*.mtl;*.setup;*.xml;*.node;*.veg;*.lyr" />

	<!-- TargetHasEditor, if not passed assume this is only the case for PC -->
	<!-- By passing explicit zero while platform is PC, you can create a "pure client" asset build -->
	<DefaultProperties TargetHasEditor="" />
	<If TargetHasEditor="">
		<If Platform="PC">
			<Properties TargetHasEditor="1" />
		</If>
		<IfNot Platform="PC">
			<Properties TargetHasEditor="0" />
		</IfNot>
	</If>

	<!-- If (TargetHasEditor == 0 && Platform == PC) store temp files in a separate folder -->
	<If TargetHasEditor="0">
		<If Platform="PC">
			<Properties TempPath="${TempPath}_pure" />
		</If>
	</If>

	<!-- Convert meshes template -->
	<MeshesJob>
		<DefaultProperties VertexPositionFormat="exporter" /> <!-- Alternative: exporter to use exporter-config, f16 or f32 to force format -->
		<DefaultProperties SplitLoDs="1" />
		<Job Input="*.cgf;*.cga" />
	</MeshesJob>

	<!-- Convert animation template -->
	<AnimationsJob>
		<DefaultProperties DbaStreamPrepare="1" />
		<DefaultProperties CafAlignTracks="1" />
		<DefaultProperties AnimConfigFolder="Animations" />
		<Job Input="*.i_caf" Refresh="1" />
		<Job Input="*.anm" CopyOnly="1" />
	</AnimationsJob>

	<!-- Convert alembic template -->
	<AlembicJob>
		<DefaultProperties SkipFilesWithoutBuildConfig="1" />
		<Job Input="*.abc" />
	</AlembicJob>

	<!-- Convert textures template -->
	<TexturesJob>
		<If Streaming=""> <!-- If not specified on command-line or otherwise -->
			<If Platform="PC">
				<Properties Streaming="1" /> <!-- Split, no tiling -->
			</If>
			<If Platform="Orbis">
				<Properties Streaming="1" /> <!-- Implies Orbis tiling -->
			</If>
			<If Platform="Durango">
				<Properties Streaming="1" /> <!-- Implies Durango tiling (optimal) -->
			</If>
			<If Platform="es3">
				<Properties Streaming="0" /> <!-- ES3 refers to ETC2 compression, RC can't split this yet -->
			</If>
		</If>
		<If PreventDdsSplitting=""> <!-- Work-around for precompiled DDS that can't be split, default: only if not streaming -->
			<If Streaming="0">
				<Properties PreventDdsSplitting="1" />
			</If>
			<IfNot Streaming="0">
				<Properties PreventDdsSplitting="0" />
			</IfNot>
		</If>
		<Job Input="*.tif" />
		<Job Input="*.dds" CopyOnly="${PreventDdsSplitting}" />
		<Job Input="*.gfx;*.png;*.usm" SourceRoot="${SourceRoot}/Textures" TargetRoot="${TargetRoot}/Textures" CopyOnly="1" />
	</TexturesJob>

	<!-- Convert XML template -->
	<XmlJob>
		<Properties OverwriteExtension="xml" />
		<If TargetHasEditor="1">
			<Properties CopyOnly="1" /> <!-- If we have editor, don't make binary XML -->
		</If>
		<Job Input="${XmlExtensions}" />
	</XmlJob>

	<!-- Convert character template -->
	<CharactersJob>
		<If TargetHasEditor="1">
			<Properties CopyOnly="1" /> <!-- Editor needs un-converted files -->
		</If>
		<DefaultProperties CompactVertexStreams="1" />
		<DefaultProperties CompactVertexStreamsKeepNormals="1" />
		<DefaultProperties ComputeSubsetTexelDensity="1" />
		<DefaultProperties VertexPositionFormat="exporter" /> <!-- Alternative: exporter to use exporter-config, f16 or f32 to force format -->
		<DefaultProperties QTangents="1" />
		<DefaultProperties OverwriteExtension="chr" />
		<Job Input="*.chr" Write_Manifests="1" StripMesh="4" />
		<Job Input="*.chr" Refresh="1" StripNonMesh="1" />
		<Job Input="*.skin" Write_Manifests="1" StripMesh="3" />
		<Job Input="*.skin" Refresh="1" StripNonMesh="1" />
	</CharactersJob>

	<!-- Compile lua script template -->
	<LuaJob>
		<If TargetHasEditor="1">
			<Properties CopyOnly="1" /> <!-- If we have editor, don't compile lua script -->
		</If>
		<If Platform="tegra">
			<Properties CopyOnly="1" /> <!-- Tegra runs 32-bit binaries on a 64-bit arch, but the lua compiler outputs binaries in the format of the arch. on which it is run -->
		</If>
		<Job Input="*.lua" />
	</LuaJob>

	<!-- Copy in subfolder template -->
	<CopySubfolderJob>
		<Properties SourceRoot="${SourceRoot}/${Subfolder}" />
		<Properties TargetRoot="${TargetRoot}/${Subfolder}" />
		<Job Input="${Input}" CopyOnly="1" />
	</CopySubfolderJob>

	<!-- Startup cache -->
	<StartupCache>
		<Properties ListFile="${InputPath}/${GameFolder}/Levels/Multiplayer/startup_list.txt" />
		<Properties DdsExpansion="{1}.dds;{1}.dds.0;{1}.dds.0a;{1}.dds.1;{1}.dds.1a;{1}.dds.2;{1}.dds.2a;{1}.dds.3;{1}.dds.3a;{1}.dds.4;{1}.dds.4a;{1}.dds.5;{1}.dds.5a;{1}.dds.6;{1}.dds.6a;{1}.dds.7;{1}.dds.7a;{1}.dds.8;{1}.dds.8a;{1}.dds.9;{1}.dds.9a;{1}.dds.10;{1}.dds.10a;{1}.dds.11;{1}.dds.11a;{1}.dds.12;{1}.dds.12a" />
		<Properties SourceMaxSize="1000000" />
		<Job Input="*.*" Zip="${TargetRoot}/_FastLoad/startup.pak" Exclude="*.fsb;*.usm;*.dds" />
		<Job Input="*.dds" Zip="${TargetRoot}/_FastLoad/startup.pak" SkipMissing="1" ListFormat="${DdsExpansion}" />
	</StartupCache>

	<!-- IntroMovies cache -->
	<IntroMoviesCache>
		<Properties Zip="${TargetRoot}\_FastLoad\IntroMovies.pak" />
		<Properties Zip_Compression="0" />
		<Job Input="Libs\UI\USM_Player_Intro.gfx" />
		<Job Input="Videos\IntroMovies.usm" />
		<!-- Add additional intro movies here -->
	</IntroMoviesCache>

	<GameAssetsConversion>
		<!-- Conversion -->
		<Properties SourceRoot="${InputPath}/${GameFolder}" />
		<Properties TargetRoot="${TempPath}/${GameFolder}_Assets" />
		<Run Job="AnimationsJob" />
		<Run Job="MeshesJob" />
		<Run Job="AlembicJob" />
		<Run Job="TexturesJob" />
		<Run Job="XmlJob" />
		<Run Job="CharactersJob" />

		<!-- Copying -->
		<Run Job="CopySubfolderJob" SubFolder="audio" Input="*.bank;*.bnk;*.fev;*.fsb;*.wem" />
		<Run Job="CopySubfolderJob" SubFolder="audio" Input="*.fdp;*.ogg" />
		<Run Job="CopySubfolderJob" SubFolder="config" Input="*.*" />
		<Run Job="CopySubfolderJob" SubFolder="Difficulty" Input="*.cfg;*.xls" />
		<Run Job="CopySubfolderJob" SubFolder="Libs" Input="*.cfg;*.dat;*.gfx;*.lua;*.lut;*.txt;*.usm" />
		<Run Job="CopySubfolderJob" SubFolder="localization" Input="*.bnk;*.gfx" />
		<Run Job="CopySubfolderJob" SubFolder="Music" Input="*.ogg;*.fsb" />
		<Run Job="CopySubfolderJob" SubFolder="Objects" Input="*.cal;*.gfx;*.grd;*.grp" />
		<Run Job="CopySubfolderJob" SubFolder="Videos" Input="*.txt;*.usm" />
		<Run Job="CopySubfolderJob" SubFolder="Particles" Input="*.pfxp;*.pfx" />

		<!-- Pack files -->
		<Properties SourceRoot="${TempPath}/${GameFolder}_Assets" />
		<Properties TargetRoot="${OutputPath}/${GameFolder}" />
		<Properties AnimationTypes="*.animevents;*.animsettings;*.anm;*.fxl;*.comb;*.bspace;*.dba;*.caf" />
		<Properties TextureTypes="*.dds;*.dds.*" />
		<Properties AlembicTypes="*.cax" />

		<!-- Compressed files -->
		<Job Input="Animations/*.*;${AnimationTypes}" Zip="${TargetRoot}/Animations.pak" />
		<Job Input="Objects/*.*" Exclude="${AlembicTypes};${AnimationTypes}" Zip="${TargetRoot}/Objects.pak" Zip_SizeSplit="1" Zip_MaxSize="1900000" />
		<Job Input="Textures/*.*;FX/*.*" Zip="${TargetRoot}/Textures.pak" Zip_SizeSplit="1" Zip_MaxSize="1900000" />
		<Job Input="Libs/*.*;Materials/*.*;Prefabs/*.*;Fonts/*.*;Difficulty/*.*;Data/*.*;Particles/*.*" Exclude="Libs/UI/*.*" Zip="${TargetRoot}/GameData.pak" />

		<!-- Uncompressed files -->
		<Job Input="${AlembicTypes}" Zip="${TargetRoot}/GeomCaches.pak" Zip_Compression="0" />
		<Job Input="Libs/UI/*.*;config/*.*" Zip="${TargetRoot}/GameData.pak" Zip_Compression="0" />
		<Job Input="audio/*.*" Zip="${TargetRoot}/Audio.pak" Zip_Compression="0" />
		<Job Input="Music/*.*" Zip="${TargetRoot}/Music.pak" Zip_Compression="0" />
		<Job Input="Videos/*.*" Zip="${TargetRoot}/Videos.pak" Zip_Compression="0" />


		<!-- Startup cache, this is deprecated -->
		<If CreateStartupCache="1">
			<Run Job="StartupCache" />
		</If>

		<!-- Loose files -->
		<Properties SourceRoot="${InputPath}/${GameFolder}" />
		<Properties EditorOnlyTypes="*.txt;*.cry;*.scry" /> <!-- Those files only have meaning for the editor, ignore them for non-editor targets -->
		<Properties EditorOnlyLevelSubFolders="*/Layers/*.*;*/LevelData/*.*" /> <!-- Those folders contain files that only have meaning for the editor, ignore them for non-editor targets -->
		<Properties AlreadyConvertedTypes="${XmlExtensions};*.tif" /> <!-- Those files have already been converted previously, ignore them now -->
		<If TargetHasEditor="1">
			<Run Job="CopySubfolderJob" SubFolder="Levels" Input="*.*" Exclude="${AlreadyConvertedTypes};*_list.txt" />
		</If>
		<IfNot TargetHasEditor="1">
			<Run Job="CopySubfolderJob" SubFolder="Levels" Input="*.*" Exclude="${EditorOnlyLevelSubFolders};${EditorOnlyTypes};${AlreadyConvertedTypes}" />
		</IfNot>
		<If Platform="Durango">
			<Run Job="CopySubfolderJob" SubFolder="Grammars" Input="*.*" />
		</If>
		<Job Input="game.cfg" CopyOnly="1" />
		<If CreateIntroMovies="1">
			<Run Job="IntroMoviesCache" />
		</If>

		<!-- Converted loose files from levels, overwrite -->
		<Properties SourceRoot="${TempPath}/${GameFolder}_Assets" />
		<If TargetHasEditor="1">
			<Run Job="CopySubfolderJob" SubFolder="Levels" Input="*.*" Exclude="*.$*" Refresh="1" />
		</If>
		<IfNot TargetHasEditor="1">
			<Run Job="CopySubfolderJob" SubFolder="Levels" Input="*.*" Exclude="${EditorOnlyLevelSubFolders};*.$*" Refresh="1" />
		</IfNot>

		<!-- Also copy some level meta-files into GameData.pak for signing purposes -->
		<Properties SourceRoot="${InputPath}/${GameFolder}" />
		<Properties TargetRoot="${OutputPath}/${GameFolder}" />
		<Job Input="Levels/*.*" Exclude="${EditorOnlyLevelSubFolders};${EditorOnlyTypes};*.pak;*.tif;*.tmd" Zip="${TargetRoot}/GameData.pak" />
	</GameAssetsConversion>

	<ScriptFolderConversion>
		<!-- Pack scripts inside a single subfolder -->
		<Properties SourceRoot="${SourceRoot}/${SubFolder}" />
		<Properties TargetRoot="${TargetRoot}/${SubFolder}" />
		<Run Job="XmlJob" />
		<Run Job="LuaJob" />
		<Job Input="*.*" Exclude="${XmlExtensions};*.lua" CopyOnly="1" />
	</ScriptFolderConversion>

	<ScriptAssetsConversion>
		<!-- Conversion -->
		<Properties SourceRoot="${InputPath}/${GameFolder}" />
		<Properties TargetRoot="${TempPath}/${GameFolder}_Scripts" />
		<Run Job="ScriptFolderConversion" SubFolder="Entities" />
		<Run Job="ScriptFolderConversion" SubFolder="Scripts" />

		<!-- Pack files -->
		<Properties SourceRoot="${TargetRoot}" />
		<Properties TargetRoot="${OutputPath}/${GameFolder}" />
		<Job Input="*.*" Zip="${TargetRoot}/Scripts.pak" />
	</ScriptAssetsConversion>

	<!-- Per-language localization template -->
	<LanguageJob>
		<Job Input="${Language}/*.*" Zip="${TargetRoot}/${Language}.pak" Zip_Compression="0" />
		<Job Input="${Language}_xml/*.*" Zip="${TargetRoot}/${Language}_xml.pak" Zip_Compression="0" />
	</LanguageJob>

	<!-- Localization, all languages -->
	<LocalizationConversion>
		<Properties SourceRoot="${InputPath}/${GameFolder}/${LocalizationFolder}" />
		<Properties TargetRoot="${OutputPath}/${GameFolder}/${LocalizationFolder}" />
		<Run Job="LanguageJob" Language="english" />
		<Run Job="LanguageJob" Language="german" />
		<Run Job="LanguageJob" Language="korean" />
	</LocalizationConversion>

	<!-- Used to generate file list -->
	<CleanJob>
		<Job Input="" TargetRoot="${TempPath}" Clean_TargetRoot="1" />
	</CleanJob>

	<!-- Run the complete asset build by default -->
	<!-- Note: You can run just one by passing /jobtarget parameter -->
	<Run Job="ScriptAssetsConversion" />
	<Run Job="GameAssetsConversion" />
	<Run Job="LocalizationConversion" />
</RCJobs>